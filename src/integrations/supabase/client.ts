
// This file is automatically generated. Do not edit it directly.
import { Database } from './types';
import { SushiCategory } from '@/types';

const SUPABASE_URL = 'https://tdykegnmomyyucbhslok.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRkeWtlZ25tb215eXVjYmhzbG9rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjA2NjUsImV4cCI6MjA1ODMzNjY2NX0.88jbkZIkFiFXudHvqe0l2DhqQGh2V9JIThv9FFFagas';

// Create a more complete mock implementation that implements all methods used in the app
export const supabase = {
  from: (table: string) => {
    return {
      select: (columns?: string) => {
        const selectResult = {
          data: null,
          error: null,
          
          eq: (column: string, value: any) => {
            return {
              ...selectResult,
              data: [],
              single: () => Promise.resolve({ data: null, error: null }),
              maybeSingle: () => Promise.resolve({ data: null, error: null }),
              eq: (column: string, value: any) => ({
                ...selectResult,
                single: () => Promise.resolve({ data: null, error: null })
              })
            };
          },
          
          order: (column: string, { ascending }: { ascending: boolean } = { ascending: true }) => {
            return {
              ...selectResult,
              data: [],
              limit: (count: number) => Promise.resolve({ data: [], error: null }),
              in: (column: string, values: any[]) => ({
                ...selectResult,
                order: (column: string) => Promise.resolve({ data: [], error: null })
              })
            };
          },
          
          limit: (count: number) => Promise.resolve({ data: [], error: null }),
          single: () => Promise.resolve({ data: null, error: null }),
          maybeSingle: () => Promise.resolve({ data: null, error: null }),
          in: (column: string, values: any[]) => ({
            ...selectResult,
            order: (column: string) => Promise.resolve({ data: [], error: null })
          })
        };
        
        return selectResult;
      },
      
      update: (data: any) => {
        const updateResult = {
          data: null,
          error: null,
          
          eq: (column: string, value: any) => Promise.resolve({ data, error: null }),
          select: () => ({
            data: null,
            error: null,
            single: () => Promise.resolve({ data, error: null })
          })
        };
        
        return updateResult;
      },
      
      insert: (data: any) => {
        const insertResult = {
          data: null,
          error: null,
          
          select: () => ({
            data: null,
            error: null,
            single: () => Promise.resolve({ data, error: null })
          })
        };
        
        return insertResult;
      },
      
      delete: () => {
        return {
          data: null,
          error: null,
          
          eq: (column: string, value: any) => Promise.resolve({ data: null, error: null })
        };
      },
      
      count: () => {
        return {
          data: 0,
          count: 0,
          error: null,
          
          eq: (column: string, value: any) => ({
            data: null,
            count: 0,
            error: null
          }),
          in: (column: string, values: any[]) => ({
            data: null,
            count: 0,
            error: null
          })
        };
      }
    };
  },
  
  auth: {
    getSession: () => Promise.resolve({ data: { session: null }, error: null }),
    signOut: () => Promise.resolve({ error: null }),
    signUp: ({ email, password }: { email: string; password: string }) => 
      Promise.resolve({ data: { user: { email } }, error: null }),
    signInWithPassword: ({ email, password }: { email: string; password: string }) => 
      Promise.resolve({ data: { user: { email } }, error: null }),
    updateUser: (data: any) => Promise.resolve({ data: { user: data }, error: null }),
    resetPasswordForEmail: (email: string) => Promise.resolve({ data: {}, error: null }),
    onAuthStateChange: (callback: Function) => {
      return {
        data: {
          subscription: {
            unsubscribe: () => {}
          }
        }
      };
    },
    admin: {
      getUserById: (id: string) => Promise.resolve({
        data: {
          user: {
            id,
            email: 'test@example.com',
            created_at: new Date().toISOString()
          }
        }, 
        error: null
      }),
      createUser: (options: any) => Promise.resolve({
        data: {
          user: {
            id: '123',
            email: options.email
          }
        },
        error: null
      })
    }
  },
  
  storage: {
    from: (bucket: string) => ({
      upload: (path: string, file: any) => Promise.resolve({ data: {}, error: null }),
      getPublicUrl: (path: string) => ({ data: { publicUrl: `https://example.com/${path}` } }),
      list: (prefix?: string) => Promise.resolve({ data: [], error: null })
    }),
    listBuckets: () => Promise.resolve({ data: [], error: null }),
    createBucket: (name: string, options?: any) => Promise.resolve({ data: { name }, error: null })
  },
  
  rpc: (functionName: string, params?: any) => Promise.resolve({ data: null, error: null }),
  
  functions: {
    invoke: (functionName: string, options?: { body?: any }) => 
      Promise.resolve({ data: null, error: null })
  }
};

// Add the fetchOrderWithDetails function that's missing
export const fetchOrderWithDetails = async (orderId: string) => {
  // This is a mock implementation returning sample order data
  return {
    id: orderId,
    status: 'confirmed',
    created_at: new Date().toISOString(),
    order_type: 'delivery',
    payment_method: 'credit-card',
    payment_status: 'paid',
    subtotal: 30.00,
    tax: 3.00,
    delivery_fee: 3.50,
    tip: 0,
    discount: 0,
    total: 36.50,
    client_name: "John Doe",
    client_email: "john@example.com",
    client_phone: "0123456789",
    delivery_street: "123 Main St",
    delivery_city: "Châteaurenard",
    delivery_postal_code: "13160",
    scheduled_for: new Date().toISOString(),
    customer_notes: "",
    delivery_instructions: "",
    allergies: [],
    order_items: [
      {
        id: "item1",
        product_id: "prod1",
        quantity: 2,
        price: 8.50,
        products: {
          name: "California Roll"
        }
      },
      {
        id: "item2",
        product_id: "prod2",
        quantity: 1,
        price: 13.00,
        products: {
          name: "Sushi Mix Box"
        }
      }
    ],
    customer: {
      first_name: "John",
      last_name: "Doe",
      email: "john@example.com",
      phone: "0123456789"
    },
    delivery_address: {
      street: "123 Main St",
      city: "Châteaurenard",
      postal_code: "13160"
    }
  };
};

// Helper function to fetch all menu data in a single request
export const fetchAllMenuData = async () => {
  try {
    // Get categories (returning mock data)
    const categories = [
      { id: "maki", name: "Maki", display_order: 0 },
      { id: "sushi", name: "Sushi", display_order: 1 },
      { id: "sashimi", name: "Sashimi", display_order: 2 },
    ];

    // Get products (returning mock data)
    const products = [
      { 
        id: "1", 
        name: "California Roll", 
        price: 6.5, 
        category_id: "maki", 
        is_new: true,
        image_url: "/placeholder.svg"
      },
      { 
        id: "2", 
        name: "Salmon Nigiri", 
        price: 4.5, 
        category_id: "sushi",
        is_new: true,
        image_url: "/placeholder.svg" 
      }
    ];

    return {
      categories: categories as SushiCategory[],
      products: products as any[], // using any to avoid Product type issues
    };
  } catch (error: any) {
    console.error("Error fetching all menu data:", error.message);
    throw error;
  }
};

// Helper function to fetch all categories
export const fetchCategories = async () => {
  // Just return mock data
  return [
    { id: "maki", name: "Maki", display_order: 0 },
    { id: "sushi", name: "Sushi", display_order: 1 },
    { id: "sashimi", name: "Sashimi", display_order: 2 },
  ];
};

// Helper function to fetch all products
export const fetchAllProducts = async () => {
  // Return mock product data
  return [
    { 
      id: "1", 
      name: "California Roll", 
      price: 6.5, 
      category_id: "maki", 
      is_new: true,
      image_url: "/placeholder.svg"
    },
    { 
      id: "2", 
      name: "Salmon Nigiri", 
      price: 4.5, 
      category_id: "sushi",
      is_new: true,
      image_url: "/placeholder.svg" 
    }
  ];
};
