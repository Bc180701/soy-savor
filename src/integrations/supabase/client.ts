// This file is automatically generated. Do not edit it directly.
import { Database } from './types';
import { SushiCategory } from '@/types';

const SUPABASE_URL = 'https://tdykegnmomyyucbhslok.supabase.co';
const SUPABASE_PUBLISHABLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRkeWtlZ25tb215eXVjYmhzbG9rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjA2NjUsImV4cCI6MjA1ODMzNjY2NX0.88jbkZIkFiFXudHvqe0l2DhqQGh2V9JIThv9FFFagas';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a more complete mock implementation that implements all methods used in the app
export const supabase = {
  from: (table: string) => ({
    select: (columns?: string) => ({
      eq: (column: string, value: any) => ({
        eq: (column: string, value: any) => ({
          single: () => Promise.resolve({ data: null, error: null }),
        }),
        single: () => Promise.resolve({ data: null, error: null }),
        order: (column: string, { ascending }: { ascending: boolean }) => 
          Promise.resolve({ data: [], error: null }),
        in: (column: string, values: any[]) => ({
          order: (column: string) => Promise.resolve({ data: [], error: null })
        }),
        limit: (count: number) => Promise.resolve({ data: [], error: null })
      }),
      order: (column: string, { ascending }: { ascending: boolean } = { ascending: true }) => ({
        limit: (count: number) => Promise.resolve({ data: [], error: null })
      }),
      limit: (count: number) => Promise.resolve({ data: [], error: null }),
      single: () => Promise.resolve({ data: null, error: null })
    }),
    update: (data: any) => ({
      eq: (column: string, value: any) => Promise.resolve({ data: null, error: null }),
      select: () => ({
        single: () => Promise.resolve({ data: null, error: null })
      })
    }),
    insert: (data: any) => ({
      select: () => ({
        single: () => Promise.resolve({ data: null, error: null })
      })
    }),
    delete: () => ({
      eq: (column: string, value: any) => Promise.resolve({ data: null, error: null })
    }),
    count: () => Promise.resolve({ data: 0, error: null })
  }),
  auth: {
    getSession: () => Promise.resolve({ data: { session: null }, error: null }),
    signOut: () => Promise.resolve({ error: null }),
    onAuthStateChange: (callback: Function) => {
      return {
        data: {
          subscription: {
            unsubscribe: () => {}
          }
        }
      };
    },
    admin: {
      getUserById: (id: string) => Promise.resolve({
        data: {
          user: {
            id: id,
            email: 'test@example.com',
            created_at: new Date().toISOString()
          }
        }, 
        error: null
      }),
      createUser: (options: any) => Promise.resolve({
        data: {
          user: {
            id: '123',
            email: options.email
          }
        },
        error: null
      })
    }
  },
  storage: {
    from: (bucket: string) => ({
      upload: (path: string, file: any) => Promise.resolve({ data: {}, error: null }),
      getPublicUrl: (path: string) => ({ data: { publicUrl: `https://example.com/${path}` } })
    })
  },
  rpc: (functionName: string, params?: any) => Promise.resolve({ data: null, error: null }),
  functions: {
    invoke: (functionName: string) => Promise.resolve({ data: null, error: null })
  }
};

// Helper function to fetch all menu data in a single request
export const fetchAllMenuData = async () => {
  try {
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('*')
      .order('display_order');

    if (categoriesError) {
      throw new Error(`Error fetching categories: ${categoriesError.message}`);
    }

    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*, categories(name)')
      .order('name');

    if (productsError) {
      throw new Error(`Error fetching products: ${productsError.message}`);
    }

    return {
      categories: categories as SushiCategory[],
      products: products as Product[],
    };
  } catch (error: any) {
    console.error("Error fetching all menu data:", error.message);
    throw error;
  }
};

// Helper function to fetch all categories
export const fetchCategories = async () => {
  // Just return mock data for now
  return [
    { id: "maki", name: "Maki", display_order: 0 },
    { id: "sushi", name: "Sushi", display_order: 1 },
    { id: "sashimi", name: "Sashimi", display_order: 2 },
  ];
};

// Helper function to fetch all products
export const fetchAllProducts = async () => {
  // Return mock product data
  return [
    { 
      id: "1", 
      name: "California Roll", 
      price: 6.5, 
      category_id: "maki", 
      is_new: true,
      image_url: "/placeholder.svg"
    },
    { 
      id: "2", 
      name: "Salmon Nigiri", 
      price: 4.5, 
      category_id: "sushi",
      is_new: true,
      image_url: "/placeholder.svg" 
    }
  ];
};
