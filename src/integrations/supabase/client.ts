
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tdykegnmomyyucbhslok.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRkeWtlZ25tb215eXVjYmhzbG9rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI3NjA2NjUsImV4cCI6MjA1ODMzNjY2NX0.88jbkZIkFiFXudHvqe0l2DhqQGh2V9JIThv9FFFagas";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to fetch products by category
export const fetchProductsByCategory = async (categoryId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select('*')
    .eq('category_id', categoryId)
    .order('name');
  
  if (error) {
    console.error("Error fetching products:", error);
    return [];
  }
  
  return data || [];
};

// Helper function to fetch all categories
export const fetchCategories = async () => {
  const { data, error } = await supabase
    .from('categories')
    .select('*')
    .order('display_order', { ascending: true });
  
  if (error) {
    console.error("Error fetching categories:", error);
    return [];
  }
  
  return data || [];
};

// Helper function to fetch all products
export const fetchAllProducts = async () => {
  const { data, error } = await supabase
    .from('products')
    .select('*, categories(name)')
    .order('name');
  
  if (error) {
    console.error("Error fetching products:", error);
    return [];
  }
  
  return data || [];
};

// Helper function to insert a new category
export const insertCategory = async (category: {
  id: string;
  name: string;
  description?: string | null;
  display_order: number;
}) => {
  const { data, error } = await supabase
    .from('categories')
    .insert(category)
    .select('*')
    .single();
    
  if (error) {
    console.error("Error inserting category:", error);
    throw error;
  }
  
  return data;
};

// Helper function to insert a new product
export const insertProduct = async (product: {
  name: string;
  description?: string | null;
  price: number;
  category_id: string;
  image_url?: string | null;
  is_vegetarian?: boolean | null;
  is_spicy?: boolean | null;
  is_new?: boolean | null;
  is_best_seller?: boolean | null;
  allergens?: string[] | null;
  pieces?: number | null;
}) => {
  const { data, error } = await supabase
    .from('products')
    .insert(product)
    .select('*')
    .single();
    
  if (error) {
    console.error("Error inserting product:", error);
    throw error;
  }
  
  return data;
};

// Helper function to check if a product with the same name exists in a category
export const productExistsInCategory = async (name: string, categoryId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select('id')
    .eq('name', name)
    .eq('category_id', categoryId);
  
  if (error) {
    console.error("Error checking product existence:", error);
    return false;
  }
  
  return data && data.length > 0;
};

// Helper function to fetch order details
export const fetchOrderWithDetails = async (orderId: string) => {
  if (!orderId) {
    console.error("No order ID provided");
    return null;
  }
  
  try {
    // Fetch order with basic details
    const { data: order, error: orderError } = await supabase
      .from('orders')
      .select('*')
      .eq('id', orderId)
      .single();
      
    if (orderError) throw orderError;
    
    // Fetch order items and associated products
    const { data: orderItems, error: itemsError } = await supabase
      .from('order_items')
      .select('*, products(*)')
      .eq('order_id', orderId);
      
    if (itemsError) throw itemsError;
    
    // Fetch customer profile details
    let customerDetails = null;
    if (order.user_id) {
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', order.user_id)
        .single();
        
      if (!profileError) {
        customerDetails = profile;
      }
    }
    
    // Fetch delivery address if available
    let addressDetails = null;
    if (order.delivery_address_id) {
      const { data: address, error: addressError } = await supabase
        .from('user_addresses')
        .select('*')
        .eq('id', order.delivery_address_id)
        .single();
        
      if (!addressError) {
        addressDetails = address;
      }
    }
    
    // Return complete order details
    return {
      ...order,
      order_items: orderItems,
      customer: customerDetails,
      delivery_address: addressDetails
    };
    
  } catch (error) {
    console.error("Error fetching order details:", error);
    return null;
  }
};
