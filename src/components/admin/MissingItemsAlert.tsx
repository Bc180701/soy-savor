import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertTriangle, Phone, Mail, RefreshCw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Order } from "@/types";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";

interface MissingItemsAlertProps {
  order: Order;
  onOrderRefresh?: () => void;
  onClearCache?: () => void;
}

export const MissingItemsAlert = ({ order, onOrderRefresh, onClearCache }: MissingItemsAlertProps) => {
  const { toast } = useToast();
  const [isRecovering, setIsRecovering] = useState(false);

  // V√©rifier s'il y a des articles (itemsSummary ou items)
  const hasItems = (order.itemsSummary && order.itemsSummary.length > 0) || 
                   (order.items && order.items.length > 0);
  
  if (hasItems) {
    return null;
  }

  const handleContactCustomer = () => {
    if (order.clientPhone) {
      window.open(`tel:${order.clientPhone}`, '_self');
    }
  };

  const handleEmailCustomer = () => {
    if (order.clientEmail) {
      const subject = `Commande ${order.id.slice(0, 8)} - Clarification n√©cessaire`;
      const body = `Bonjour ${order.clientName},\n\nNous avons bien re√ßu votre commande du ${order.createdAt.toLocaleDateString()} d'un montant de ${order.total}‚Ç¨.\n\nCependant, nous rencontrons un probl√®me technique et nous avons besoin de clarifier les articles de votre commande.\n\nPouvez-vous nous rappeler ce que vous aviez command√© ?\n\nCordialement,\nL'√©quipe Sushi Eats`;
      window.open(`mailto:${order.clientEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`, '_self');
    }
  };

  const handleRecoverItems = async () => {
    console.log('üîç Diagnostic avant r√©cup√©ration pour commande:', order.id);
    console.log('üìã Order.itemsSummary:', order.itemsSummary);
    console.log('üì¶ Order.items:', order.items);
    console.log('üí∞ Order.total:', order.total);
    
    setIsRecovering(true);
    
    try {
      const { data, error } = await supabase.functions.invoke('recover-order-items', {
        body: { orderId: order.id }
      });

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration:', error);
        toast({
          title: "Erreur de r√©cup√©ration",
          description: "Impossible de r√©cup√©rer les articles automatiquement",
          variant: "destructive"
        });
        return;
      }

      console.log('‚úÖ R√©sultat de la r√©cup√©ration:', data);

      if (data?.success) {
        toast({
          title: "Articles r√©cup√©r√©s",
          description: `${data.recovered_items || 0} articles r√©cup√©r√©s avec succ√®s`,
          variant: "default"
        });
        
        console.log('üîÑ R√©cup√©ration termin√©e, mise √† jour des donn√©es...');
        
        // FORCER un refresh complet avec cache vid√©
        if (onClearCache) {
          console.log('üóëÔ∏è Vidage du cache...');
          onClearCache();
        }
        
        // Refresh imm√©diat puis refresh retard√© pour s'assurer
        if (onOrderRefresh) {
          console.log('üîÑ Refresh imm√©diat...');
          onOrderRefresh();
          
          // Deuxi√®me refresh apr√®s 1 seconde pour √™tre s√ªr
          setTimeout(() => {
            console.log('üîÑ Refresh retard√©...');
            onOrderRefresh();
          }, 1000);
        }
        
        // Forcer un reload de la page en dernier recours si rien ne marche
        setTimeout(() => {
          const hasItemsAfter = (order.itemsSummary && order.itemsSummary.length > 0) || 
                               (order.items && order.items.length > 0);
          if (!hasItemsAfter) {
            console.log('‚ö†Ô∏è Les articles ne sont toujours pas visibles, reload forc√© dans 2s...');
            setTimeout(() => {
              console.log('üîÑ RELOAD FORC√â DE LA PAGE');
              window.location.reload();
            }, 2000);
          }
        }, 1500);
        
      } else {
        toast({
          title: "R√©cup√©ration impossible",
          description: data?.message || "Aucun article √† r√©cup√©rer",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error('üí• Erreur lors de la r√©cup√©ration:', error);
      toast({
        title: "Erreur technique",
        description: "Une erreur est survenue lors de la r√©cup√©ration",
        variant: "destructive"
      });
    } finally {
      setIsRecovering(false);
    }
  };

  return (
    <Alert className="border-destructive bg-destructive/10 mb-4">
      <AlertTriangle className="h-4 w-4 text-destructive" />
      <AlertDescription className="space-y-3">
        <div className="font-semibold text-destructive">
          ‚ö†Ô∏è COMMANDE SANS ARTICLES - ACTION URGENTE REQUISE
        </div>
        <div className="text-sm">
          Cette commande ne contient aucun article en base de donn√©es. 
          Il s'agit probablement d'un probl√®me technique survenu lors de la cr√©ation de la commande.
        </div>
        <div className="flex flex-wrap gap-2">
          <Button 
            size="sm" 
            variant="default" 
            onClick={handleRecoverItems}
            disabled={isRecovering}
            className="bg-primary text-primary-foreground hover:bg-primary/90"
          >
            <RefreshCw className={`h-3 w-3 mr-1 ${isRecovering ? 'animate-spin' : ''}`} />
            {isRecovering ? 'R√©cup√©ration...' : 'R√©cup√©rer automatiquement'}
          </Button>
          <Button 
            size="sm" 
            variant="outline" 
            onClick={handleContactCustomer}
            className="text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground"
            disabled={!order.clientPhone}
          >
            <Phone className="h-3 w-3 mr-1" />
            Appeler: {order.clientPhone}
          </Button>
          <Button 
            size="sm" 
            variant="outline" 
            onClick={handleEmailCustomer}
            className="text-destructive border-destructive hover:bg-destructive hover:text-destructive-foreground"
            disabled={!order.clientEmail}
          >
            <Mail className="h-3 w-3 mr-1" />
            Email: {order.clientEmail}
          </Button>
        </div>
        <div className="text-xs text-muted-foreground">
          Essayez d'abord la r√©cup√©ration automatique. Si elle √©choue, contactez le client pour conna√Ætre sa commande.
        </div>
      </AlertDescription>
    </Alert>
  );
};